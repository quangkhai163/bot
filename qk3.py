import asyncio
import random
import requests
from telegram import Update
from telegram.ext import Application, CommandHandler, MessageHandler, filters, ContextTypes

BOT_CONFIG = {
    'TOKEN': '7819864046:AAFd24PGlIf8xm4lR1ewCjLTY2Oq3glldL0',
    'USER_ID': 5976243149
}

# --- C√°c l·ªánh bot g√°i ---
async def menu(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("""
üî• MENU BOT üî•

üë©‚Äçü¶∞ G√ÅI G√ö:
- /videogai : Random video g√°i c·ª±c ph·∫©m TVM
- /anhgai : Random ·∫£nh g√°i xinh

üõ°Ô∏è QU·∫¢N L√ù NH√ìM:
- /ban (reply) : Ban th√†nh vi√™n
- /unban (reply) : G·ª° ban th√†nh vi√™n
- /mute (reply) : Mute th√†nh vi√™n
- /unmute (reply) : G·ª° mute th√†nh vi√™n
- /kickrandom : Kick random th√†nh vi√™n

‚ö° T√çNH NƒÇNG VUI:
- /spam [sdt] : Spam SMS c·ª±c m·∫°nh
- /tiktok [link] : T·∫£i video TikTok kh√¥ng logo
- /addfr [UID] : G·ª≠i k·∫øt b·∫°n UID Free Fire

üí¨ By Admin Quang Kh·∫£i
""")

async def videogai(update: Update, context: ContextTypes.DEFAULT_TYPE):
    try:
        res = requests.get("https://api.ffcommunity.site/randomvideo.php").json()
        video_url = res['url']
        captions = [
            "Vitamin g√°i ƒë·∫πp m·ªói ng√†y!",
            "G√°i ƒë·∫πp ti·∫øp th√™m nƒÉng l∆∞·ª£ng!",
            "C√πng ng·∫Øm g√°i xinh n√†o bro!",
            "G√°i ƒë·∫πp gi√∫p gi·∫£m stress c·ª±c m·∫°nh!"
        ]
        caption = random.choice(captions)
        await update.message.reply_video(video=video_url, caption=caption)
    except:
        await update.message.reply_text("‚ùå Kh√¥ng l·∫•y ƒë∆∞·ª£c video g√°i!")

async def anhgai(update: Update, context: ContextTypes.DEFAULT_TYPE):
    try:
        res = requests.get("https://api.leanhtruong.net/api/v2/image/gai.php").json()
        img_url = res['data']['url']
        await update.message.reply_photo(photo=img_url, caption="üì∏ G√°i xinh ƒë√¢y bro!")
    except:
        await update.message.reply_text("‚ùå Kh√¥ng l·∫•y ƒë∆∞·ª£c ·∫£nh g√°i!")

async def ban(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if update.message.reply_to_message:
        await update.effective_chat.ban_member(update.message.reply_to_message.from_user.id)
        await update.message.reply_text("‚úÖ ƒê√£ ban th√†nh vi√™n!")

async def unban(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if update.message.reply_to_message:
        await update.effective_chat.unban_member(update.message.reply_to_message.from_user.id)
        await update.message.reply_text("‚úÖ ƒê√£ g·ª° ban th√†nh vi√™n!")

async def mute(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if update.message.reply_to_message:
        permissions = Update.default_permissions(can_send_messages=False)
        await update.effective_chat.restrict_member(update.message.reply_to_message.from_user.id, permissions)
        await update.message.reply_text("‚úÖ ƒê√£ mute th√†nh vi√™n!")

async def unmute(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if update.message.reply_to_message:
        permissions = Update.default_permissions(can_send_messages=True)
        await update.effective_chat.restrict_member(update.message.reply_to_message.from_user.id, permissions)
        await update.message.reply_text("‚úÖ ƒê√£ g·ª° mute th√†nh vi√™n!")

async def kickrandom(update: Update, context: ContextTypes.DEFAULT_TYPE):
    members = await update.effective_chat.get_members()
    user = random.choice(members)
    await update.effective_chat.kick_member(user.user.id)
    await update.message.reply_text(f"‚úÖ ƒê√£ kick random: {user.user.first_name}")

async def spam(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if len(context.args) != 1:
        await update.message.reply_text("üì• D√πng: /spam [s·ªë ƒëi·ªán tho·∫°i]")
        return
    phone = context.args[0]
    try:
        requests.post("https://vietteltelecom.vn/api/Account/SendOTP", json={"phoneNumber": phone})
        requests.post("https://fptplay.net/api/user/sendOTP", json={"phone": phone})
        await update.message.reply_text(f"‚úÖ ƒê√£ g·ª≠i spam t·ªõi {phone}!")
    except:
        await update.message.reply_text("‚ùå L·ªói spam!")

async def tiktok(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if len(context.args) != 1:
        await update.message.reply_text("üì• D√πng: /tiktok [link]")
        return
    link = context.args[0]
    try:
        res = requests.get(f"https://tikwm.com/api/?url={link}").json()
        video_url = res['data']['play']
        await update.message.reply_video(video=video_url, caption="‚úÖ T·∫£i th√†nh c√¥ng TikTok!")
    except:
        await update.message.reply_text("‚ùå L·ªói t·∫£i TikTok!")

async def addfr(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if len(context.args) != 1:
        await update.message.reply_text("üì• D√πng: /addfr [UID]")
        return
    uid = context.args[0]
    await update.message.reply_text(f"‚úÖ ƒê√£ g·ª≠i k·∫øt b·∫°n t·ªõi UID: {uid}")

# --- H√†m g·ª≠i g√°i khi c√≥ th√†nh vi√™n m·ªõi ---
async def welcome_new_member(update: Update, context: ContextTypes.DEFAULT_TYPE):
    try:
        api_video_list = [
            "https://api.ffcommunity.site/randomvideo.php",
            "https://api.leanhtruong.net/api/v2/video/gai.php",
            "https://api-ttk3.hoanghao.click/api/video/gai.php"
        ]
        api_image = "https://api.leanhtruong.net/api/v2/image/gai.php"

        captions = [
            "Ch√†o m·ª´ng bro m·ªõi b·∫±ng g√°i ƒë·∫πp n√®!",
            "Gia nh·∫≠p group nh·∫≠n ngay g√°i xinh!",
            "M√≥n qu√† ch√†o m·ª´ng: vitamin g√°i c·ª±c m·∫°nh!",
            "M·ªü m√†n b·∫±ng g√°i ƒë·∫πp, v√†o group c·ª±c ph√™!",
            "Anh em welcome th√†nh vi√™n m·ªõi v·ªõi g√°i ƒë·∫πp!",
            "G√°i ƒë·∫πp - Th√†nh vi√™n m·ªõi, combo ho√†n h·∫£o!",
            "G√°i xinh ch√†o ƒë√≥n b·∫°n bro!"
        ]

        video_url = None

        # Th·ª≠ l·∫ßn l∆∞·ª£t c√°c API video
        for api_url in random.sample(api_video_list, len(api_video_list)):
            try:
                res = requests.get(api_url, timeout=5).json()
                if 'url' in res:
                    video_url = res['url']
                elif 'data' in res and 'url' in res['data']:
                    video_url = res['data']['url']
                if video_url:
                    break
            except Exception as e:
                print(f"‚ö†Ô∏è API l·ªói {api_url}: {e}")

        # N·∫øu kh√¥ng l·∫•y ƒë∆∞·ª£c video -> l·∫•y ·∫£nh g√°i
        if not video_url:
            try:
                res_img = requests.get(api_image, timeout=5).json()
                if 'data' in res_img and 'url' in res_img['data']:
                    image_url = res_img['data']['url']
                    caption = random.choice(captions)
                    for member in update.message.new_chat_members:
                        await update.message.reply_photo(photo=image_url, caption=f"{caption}\n(·∫¢nh g√°i xinh thay th·∫ø)")
                    return
            except Exception as e:
                print(f"‚ùå L·ªói l·∫•y ·∫£nh g√°i: {e}")
            # N·∫øu c·∫£ ·∫£nh c≈©ng fail
            await update.message.reply_text("‚ùå Kh√¥ng l·∫•y ƒë∆∞·ª£c g√°i ƒë·∫πp ƒë·ªÉ ch√†o m·ª´ng!")
            return

        # N·∫øu l·∫•y ƒë∆∞·ª£c video
        caption = random.choice(captions)
        for member in update.message.new_chat_members:
            await update.message.reply_video(video=video_url, caption=caption)

    except Exception as e:
        print(f"‚ùå L·ªói t·ªïng qu√°t welcome_new_member: {e}")

# --- Alive ping ---
async def ping_alive(application: Application):
    while True:
        try:
            await application.bot.send_message(chat_id=BOT_CONFIG['USER_ID'], text="#bot_alive_qk")
        except Exception as e:
            print(f"‚ö†Ô∏è L·ªói alive: {e}")
        await asyncio.sleep(30)

# --- MAIN ---
async def main():
    app = Application.builder().token(BOT_CONFIG['TOKEN']).build()

    app.add_handler(CommandHandler("menu", menu))
    app.add_handler(CommandHandler("videogai", videogai))
    app.add_handler(CommandHandler("anhgai", anhgai))
    app.add_handler(CommandHandler("ban", ban))
    app.add_handler(CommandHandler("unban", unban))
    app.add_handler(CommandHandler("mute", mute))
    app.add_handler(CommandHandler("unmute", unmute))
    app.add_handler(CommandHandler("kickrandom", kickrandom))
    app.add_handler(CommandHandler("spam", spam))
    app.add_handler(CommandHandler("tiktok", tiktok))
    app.add_handler(CommandHandler("addfr", addfr))
    app.add_handler(MessageHandler(filters.StatusUpdate.NEW_CHAT_MEMBERS, welcome_new_member))

    print("ü§ñ BOT G√ÅI QK3 ch·∫°y r·ªìi...")
    await app.initialize()
    await app.start()
    await app.bot.send_message(chat_id=BOT_CONFIG['USER_ID'], text="‚úÖ BOT G√ÅI QKHAI ƒë√£ ho·∫°t ƒë·ªông!")

    asyncio.create_task(ping_alive(app))

    await app.updater.start_polling()
    await asyncio.Event().wait()

if __name__ == "__main__":
    asyncio.run(main())